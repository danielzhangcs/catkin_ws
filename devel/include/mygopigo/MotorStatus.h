// Generated by gencpp from file mygopigo/MotorStatus.msg
// DO NOT EDIT!


#ifndef MYGOPIGO_MESSAGE_MOTORSTATUS_H
#define MYGOPIGO_MESSAGE_MOTORSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mygopigo
{
template <class ContainerAllocator>
struct MotorStatus_
{
  typedef MotorStatus_<ContainerAllocator> Type;

  MotorStatus_()
    : low_voltage(false)
    , overloaded(false)
    , power(0)
    , encoder(0.0)
    , speed(0.0)  {
    }
  MotorStatus_(const ContainerAllocator& _alloc)
    : low_voltage(false)
    , overloaded(false)
    , power(0)
    , encoder(0.0)
    , speed(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _low_voltage_type;
  _low_voltage_type low_voltage;

   typedef uint8_t _overloaded_type;
  _overloaded_type overloaded;

   typedef int8_t _power_type;
  _power_type power;

   typedef float _encoder_type;
  _encoder_type encoder;

   typedef float _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::mygopigo::MotorStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mygopigo::MotorStatus_<ContainerAllocator> const> ConstPtr;

}; // struct MotorStatus_

typedef ::mygopigo::MotorStatus_<std::allocator<void> > MotorStatus;

typedef boost::shared_ptr< ::mygopigo::MotorStatus > MotorStatusPtr;
typedef boost::shared_ptr< ::mygopigo::MotorStatus const> MotorStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mygopigo::MotorStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mygopigo::MotorStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mygopigo::MotorStatus_<ContainerAllocator1> & lhs, const ::mygopigo::MotorStatus_<ContainerAllocator2> & rhs)
{
  return lhs.low_voltage == rhs.low_voltage &&
    lhs.overloaded == rhs.overloaded &&
    lhs.power == rhs.power &&
    lhs.encoder == rhs.encoder &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mygopigo::MotorStatus_<ContainerAllocator1> & lhs, const ::mygopigo::MotorStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mygopigo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mygopigo::MotorStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mygopigo::MotorStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mygopigo::MotorStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mygopigo::MotorStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mygopigo::MotorStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mygopigo::MotorStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mygopigo::MotorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fa9d221cf281ffba79b583b9dd588c6f";
  }

  static const char* value(const ::mygopigo::MotorStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfa9d221cf281ffbaULL;
  static const uint64_t static_value2 = 0x79b583b9dd588c6fULL;
};

template<class ContainerAllocator>
struct DataType< ::mygopigo::MotorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mygopigo/MotorStatus";
  }

  static const char* value(const ::mygopigo::MotorStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mygopigo::MotorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool low_voltage\n"
"bool overloaded\n"
"int8 power      # PWM duty cycle -100 ... 100\n"
"float32 encoder # degree\n"
"float32 speed   # degree per second\n"
;
  }

  static const char* value(const ::mygopigo::MotorStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mygopigo::MotorStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.low_voltage);
      stream.next(m.overloaded);
      stream.next(m.power);
      stream.next(m.encoder);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mygopigo::MotorStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mygopigo::MotorStatus_<ContainerAllocator>& v)
  {
    s << indent << "low_voltage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.low_voltage);
    s << indent << "overloaded: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.overloaded);
    s << indent << "power: ";
    Printer<int8_t>::stream(s, indent + "  ", v.power);
    s << indent << "encoder: ";
    Printer<float>::stream(s, indent + "  ", v.encoder);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MYGOPIGO_MESSAGE_MOTORSTATUS_H
